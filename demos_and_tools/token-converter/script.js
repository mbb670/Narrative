const el=id=>document.getElementById(id);
const jsEl=el('json'),cssEl=el('css'),jsHL=el('jsonHL'),cssHL=el('cssHL'),statusEl=el('jstatus');
const settings={prefix:el('prefix'),selector:el('selector'),case:el('case'),joiner:el('joiner'),numPx:el('numPx'),fontRem:el('fontRem'),remBase:el('remBase'),excludePriv:el('excludePriv'),emitVarRefs:el('emitVarRefs'),resolveRefs:el('resolveRefs'),emitFallback:el('emitFallback'),useInline:el('useInline'),smartSel:el('smartSel'),autoSort:el('autoSort'),attrManual:el('attrManual')};
function status(msg,isErr){statusEl.textContent=msg;statusEl.style.color=isErr?'#fca5a5':'#9da9c0';}
/* highlighting */
const esc=s=>String(s).replace(/[&<>]/g,c=>({"&":"&amp;","<":"&lt;",">":"&gt;"}[c]||c));
function highlightJSON(src){src=String(src);let out='',i=0,N=src.length;while(i<N){const ch=src[i];if(ch=='"'){let j=i+1,buf='"';for(;j<N;j++){const c=src[j];buf+=c;if(c=='"'&&src[j-1]!="\\"){j++;break;}}out+='<span class="s">'+esc(buf)+'</span>';i=j;continue;}if(/[\d\-]/.test(ch)){let j=i;while(j<N&&/[0-9eE+\-.]/.test(src[j])) j++;out+='<span class="n">'+esc(src.slice(i,j))+'</span>';i=j;continue;}if(src.startsWith('true',i)||src.startsWith('false',i)||src.startsWith('null',i)){const m=src.startsWith('true',i)?'true':src.startsWith('false',i)?'false':'null';out+='<span class="b">'+m+'</span>';i+=m.length;continue;}if(/[{}\[\],:]/.test(ch)){out+='<span class="p">'+ch+'</span>';i++;continue;}out+=esc(ch);i++;}return out;}
function highlightCSS(src){let s=esc(String(src));s=s.replace(/\/\*[\s\S]*?\*\//g,'<span class="c">$&</span>');s=s.replace(/\b-?\d+(?:\.\d+)?(?:px|rem|em|%|vh|vw|s|ms)?\b/g,'<span class="n">$&</span>');s=s.replace(/#[0-9a-fA-F]{3,8}\b/g,'<span class="u">$&</span>');s=s.replace(/(^|[\n;{]\s*)([a-zA-Z-]+)(\s*:)/g,(m,a,b,c)=>a+'<span class="prop">'+b+'</span>'+c);s=s.replace(/(^|\n)\s*([^\n{}]+)\s*\{/g,(m,a,b)=>a+'<span class="sel">'+b.trim()+'</span> {');s=s.replace(/[{};:]/g,'<span class="p">$&</span>');return s;}
function attachHL(textarea,overlay,fn){const sync=()=>{const selOK=settings.smartSel&&settings.smartSel.checked;overlay.style.display=(selOK&&document.body.classList.contains('selecting'))?'none':'block';if(overlay.style.display==='block'){textarea.style.color='transparent';overlay.innerHTML=fn(textarea.value);}else{textarea.style.color='#e8eaf0';}overlay.scrollTop=textarea.scrollTop;overlay.scrollLeft=textarea.scrollLeft;};textarea.addEventListener('input',sync);textarea.addEventListener('scroll',sync);if(settings.smartSel) settings.smartSel.addEventListener('change',sync);['mousedown','touchstart'].forEach(ev=>textarea.addEventListener(ev,()=>{document.body.classList.add('selecting');sync();}));['mouseup','mouseleave','blur','touchend','touchcancel'].forEach(ev=>textarea.addEventListener(ev,()=>{document.body.classList.remove('selecting');sync();}));sync();}
/* core */
function toCase(parts){const j=settings.joiner.value||'-';const c=settings.case.value;const norm=p=>String(p).replace(/[^a-zA-Z0-9]+/g,' ').trim();if(c==='kebab')return parts.map(p=>norm(p).toLowerCase().replace(/\s+/g,'-')).join(j);if(c==='snake')return parts.map(p=>norm(p).toLowerCase().replace(/\s+/g,'_')).join(j);if(c==='camel')return parts.map((p,i)=>{p=norm(p).toLowerCase();return i? p.replace(/\b\w/g,m=>m.toUpperCase()).replace(/\s+/g,''):p.replace(/\s+/g,'');}).join('');return parts.join(j);}function isLeaf(obj){if(obj==null) return true; if(Array.isArray(obj)) return true; if(typeof obj!=='object') return true; const ks=Object.keys(obj); if(ks.length===0) return true; if('value'in obj && ks.length<=3) return true; return false;}const leafVal=v=>v&&typeof v==='object'&&'value'in v? v.value:v;function flatten(obj,path=[],out=[]){if(isLeaf(obj)){out.push({path:[...path],value:leafVal(obj),node:obj});return out;}for(const k in obj){if(settings.excludePriv.checked && /^[_$]/.test(k)) continue;flatten(obj[k],[...path,k],out);}return out;}function tryParse(txt){const t=String(txt||'').trim();if(!t) return {};try{return JSON.parse(t);}catch(e){status('JSON error: '+e.message,true);throw e;}}function refToVar(nameParts){const pfx=settings.prefix.value? [settings.prefix.value,...nameParts]:nameParts;return 'var(--'+toCase(pfx)+')';}
function resolveRefsInString(str,map,toVar,collector){return String(str).replace(/\{([^}]+)\}/g,(_,p)=>{const key=p.trim().replace(/\s+/g,'');const parts=key.split('.');if(collector) collector.push({key,parts});if(toVar) return refToVar(parts);if(key in map){const v=map[key];return (typeof v==='string'||typeof v==='number')? v : '{'+p+'}';}return '{'+p+'}';});}
function resolveFully(str,map){let cur=String(str),prev='';for(let i=0;i<12;i++){prev=cur;cur=resolveRefsInString(cur,map,false);if(cur===prev||!/\{[^}]+\}/.test(cur)) break;}return cur;}
function withUnits(nameParts,val){if(typeof val==='number'){if(settings.fontRem.checked && /(^|\.|\/)font(Size|size)$/.test(nameParts.join('.'))){const rem=val/Number(settings.remBase.value||16);return rem.toFixed(5).replace(/0+$/,'').replace(/\.$/,'')+'rem';}return settings.numPx.checked? val+'px': String(val);}if(typeof val==='string')return val;if(Array.isArray(val))return val.map(x=>withUnits(nameParts,x)).join(' ');return String(val);}function buildMap(flat){const m={};for(const it of flat)m[it.path.join('.')]=leafVal(it.value);return m;}const mapFrom=obj=>buildMap(flatten(obj,[],[]));function toCSSProp(n){return String(n).replace(/[A-Z]/g,m=>'-'+m.toLowerCase());}
function slugify(s){return String(s||'').toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'');}
function refPartsToVar(parts){const pfx=settings.prefix.value?[settings.prefix.value,...parts]:parts;return `--${toCase(pfx)}`;}
function resolvedValueForKey(key,map,itPath){let v=(key in map)?map[key]:null;const finalize=(val)=>{if(typeof val==='string' || typeof val==='number') return withUnits(itPath,val);return null;};if(v!=null){if(typeof v==='string'){if(/\{[^}]+\}/.test(v)) v=resolveFully(v,map);if(/\{[^}]+\}/.test(v)) return null;}return finalize(v);}const res=resolveFully('{'+key+'}',map);if(!/\{[^}]+\}/.test(res)) return finalize(res);return null;}
function toVarWithFallback(parts,map,itPath){const fb=(settings.emitFallback&&settings.emitFallback.checked)?resolvedValueForKey(parts.join('.'),map,itPath):null;const name=refPartsToVar(parts);return fb!=null?`var(${name}, ${fb})`:`var(${name})`;}
function replaceRefsWithVars(str,map,itPath){return String(str).replace(/\{([^}]+)\}/g,(_,p)=>{const parts=p.trim().replace(/\s+/g,'').split('.');return toVarWithFallback(parts,map,itPath);});}
/* collections state */
const modal=el('collectionsModal');const glist=el('glist');const groups=[];function rid(){return Math.random().toString(36).slice(2)}
el('collectionsBtn').onclick=()=>{modal.classList.add('open');document.body.classList.add('modal-open');renderGroups();};
el('closeCollections').onclick=()=>{modal.classList.remove('open');document.body.classList.remove('modal-open');};
modal.addEventListener('click',e=>{if(e.target===modal){modal.classList.remove('open');document.body.classList.remove('modal-open');}});
el('addGroup').onclick=()=>{groups.push({id:rid(),name:'collection-'+(groups.length+1),type:'global',active:true,sets:[],defaults:{}});renderGroups();};
function inferType(name){const t=(String(name||'').trim().toLowerCase());if(/^(mode|modes|theme|themes)$/.test(t))return 'mode';if(/^(break|breaks|breakpoint|breakpoints|bp|bps)$/.test(t))return 'breakpoint';if(/^(style|styles)$/.test(t))return 'styles';if(/^(global|base)$/.test(t))return 'global';return 'other';}
function typeOrder(t){return t==='global'?0:t==='breakpoint'?1:t==='other'?2:t==='mode'?3:t==='styles'?4:5;}
function modeRank(s){const m=(s.mode&&s.mode!=='auto')?s.mode:(/dark/i.test(s.name)?'dark':(/light/i.test(s.name)?'light':'auto'));return (m==='light'||m==='auto')?0:(m==='dark'?1:2);}function bpValue(s){const nm=(s.name||'').toLowerCase();if(/mobile/.test(nm)) return null; if(/tablet/.test(nm)) return 640; if(/desktop/.test(nm)) return 1024; return Number.isFinite(s.bp)?Number(s.bp):null;}
function sortGroupsUI(){groups.sort((a,b)=>typeOrder(a.type)-typeOrder(b.type));for(const g of groups){if(g.type==='mode'){g.sets.sort((a,b)=>modeRank(a)-modeRank(b));}else if(g.type==='breakpoint'){g.sets.sort((a,b)=>{const av=bpValue(a),bv=bpValue(b); if(av===bv) return 0; if(av===null) return -1; if(bv===null) return 1; return av-bv;});}else if(g.type==='other' && g.defaultSetId){g.sets.sort((a,b)=> (a.id===g.defaultSetId? -1 : b.id===g.defaultSetId? 1 : 0));}}}

el('addFolderColl').onclick=()=>el('folderPick').click();
el('folderPick').addEventListener('change',e=>{const files=[...e.target.files].filter(f=>/\.json$/i.test(f.name));if(!files.length) return;const byParent={};for(const f of files){const rel=f.webkitRelativePath||f.name;const seg=rel.split('/');const parent=seg.length>1? seg[seg.length-2] : 'collection';(byParent[parent]??=([])).push(f);}let pending=0;for(const [parent,flist] of Object.entries(byParent)){let g=groups.find(x=>x.name===parent);if(!g){g={id:rid(),name:parent,type:inferType(parent),active:true,sets:[],defaults:{}};groups.push(g);}pending+=flist.length;flist.forEach(f=>{const r=new FileReader();r.onload=()=>{try{const setObj={id:rid(),name:f.name.replace(/\.json$/i,''),active:true,data:tryParse(r.result)};if(g.type==='other' && /^default$/i.test(setObj.name)) g.defaultSetId=setObj.id;g.sets.push(setObj);}catch{}finally{pending--;if(pending===0){sortGroupsUI();renderGroups();}}};r.readAsText(f);});}e.target.value='';});
function controlCell(g,s){if(g.type==='mode'){const guess=/dark/i.test(s.name)?'dark':/light/i.test(s.name)?'light':'auto';const val=s.mode||guess;return `<select data-act="smode" data-gid="${g.id}" data-id="${s.id}" class="chip"><option ${val==='auto'?'selected':''} value="auto">auto</option><option ${val==='light'?'selected':''} value="light">light</option><option ${val==='dark'?'selected':''} value="dark">dark</option></select>`;}if(g.type==='breakpoint'){const nm=(s.name||'').toLowerCase();const isMobile=/mobile/.test(nm);const guess=isMobile?null:(/tablet/.test(nm)?640:(/desktop/.test(nm)?1024:''));if(isMobile) return '<span class="chip">mobile (default)</span>';const v=s.bp??'';return `<label class="chip">min‑width <input type="number" min="0" step="1" data-act="sbp" data-gid="${g.id}" data-id="${s.id}" value="${v}" placeholder="${guess}" style="width:7em;background:transparent;border:0;border-bottom:1px dashed #2a3245"></label>`;}if(g.type==='other'){const isDef=(g.defaultSetId===s.id);return `<label class="chip">alias <input data-act="sname" data-gid="${g.id}" data-id="${s.id}" placeholder="${s.name}" value="${s.alias||''}" style="width:10em;background:transparent;border:0;border-bottom:1px dashed #2a3245"></label><label class="chip" title="Use this set as default (no wrapper)"><input type="radio" name="gdef-${g.id}" data-act="sdefault" data-gid="${g.id}" data-id="${s.id}" ${isDef?'checked':''}> default</label>`;}return '<span class="muted">—</span>'}
function uiSortedSets(g){if(g.type==='other' && g.defaultSetId){const d=g.defaultSetId;const rest=g.sets.filter(s=>s.id!==d);const def=g.sets.find(s=>s.id===d);return def?[def,...rest]:g.sets.slice();}if(g.type==='mode'){return g.sets.slice().sort((a,b)=>modeRank(a)-modeRank(b));}if(g.type==='breakpoint'){return g.sets.slice().sort((a,b)=>{const av=bpValue(a),bv=bpValue(b); if(av===bv) return 0; if(av===null) return -1; if(bv===null) return 1; return av-bv;});}return g.sets.slice();}
function setRow(g,s,idx){return `<tr><td><input type="checkbox" data-act="sactive" data-gid="${g.id}" data-id="${s.id}" ${s.active?'checked':''}></td><td>${idx+1}</td><td><strong>${esc(s.name)}</strong>${(g.type==='other'&&g.defaultSetId===s.id)?' <span class="tag">default</span>':''}</td><td>${controlCell(g,s)}</td><td><button class="chip" data-act="sview" data-gid="${g.id}" data-id="${s.id}">👁 View/Edit</button></td><td><button class="chip" data-act="sup" data-gid="${g.id}" data-id="${s.id}">↑</button><button class="chip" data-act="sdown" data-gid="${g.id}" data-id="${s.id}">↓</button><button class="chip" data-act="srm" data-gid="${g.id}" data-id="${s.id}">✕</button></td></tr>`}
function renderGroups(){glist.innerHTML='';groups.forEach((g)=>{const card=document.createElement('div');card.className='gcard';card.innerHTML=`<div class="row"><input data-act="gname" data-id="${g.id}" value="${esc(g.name)}" class="chip" style="background:transparent;border:1px solid #273042"/><select data-act="gtype" data-id="${g.id}" class="chip"><option ${g.type==='global'?'selected':''} value="global">Global</option><option ${g.type==='mode'?'selected':''} value="mode">Mode</option><option ${g.type==='breakpoint'?'selected':''} value="breakpoint">Breakpoint</option><option ${g.type==='other'?'selected':''} value="other">Other</option><option ${g.type==='styles'?'selected':''} value="styles">Styles</option></select><label class="chip"><input type="checkbox" data-act="gactive" data-id="${g.id}" ${g.active?'checked':''}/> active</label><span class="grow"></span><button class="chip" data-act="gup" data-id="${g.id}">↑</button><button class="chip" data-act="gdown" data-id="${g.id}">↓</button><button class="chip" data-act="grm" data-id="${g.id}">✕</button></div>`;card.innerHTML+=`<table class="table"><colgroup><col class="col-on"><col class="col-num"><col><col class="col-ctrl"><col class="col-json"><col class="col-actions"></colgroup><thead><tr><th>On</th><th>#</th><th>Set</th><th>Control</th><th>JSON</th><th>Actions</th></tr></thead><tbody>${uiSortedSets(g).map((s,idx)=>setRow(g,s,idx)).join('')}</tbody></table><div class="row"><label class="chip"><input type="file" data-act="gfiles" data-id="${g.id}" accept="application/json" multiple style="display:none"/><span>📁 Add file(s)</span></label><button class="chip" data-act="gpaste" data-id="${g.id}">+ Paste set</button></div>`;glist.appendChild(card);});}
function getActTarget(e){const t=e.target.closest('[data-act]');return t?{act:t.dataset.act,gid:t.dataset.gid||t.dataset.id,id:t.dataset.id}:null}
glist.addEventListener('click',e=>{const x=getActTarget(e);if(!x)return;const g=groups.find(a=>a.id===x.gid||a.id===x.id);if(!g)return;const getIndex=(sid)=>g.sets.findIndex(z=>z.id===sid);if(x.act==='gup'){const i=groups.findIndex(a=>a.id===g.id);if(i>0){[groups[i-1],groups[i]]=[groups[i],groups[i-1]];renderGroups();}}if(x.act==='gdown'){const i=groups.findIndex(a=>a.id===g.id);if(i<groups.length-1){[groups[i+1],groups[i]]=[groups[i],groups[i+1]];renderGroups();}}if(x.act==='grm'){const i=groups.findIndex(a=>a.id===g.id);groups.splice(i,1);renderGroups();}if(x.act==='srm'){const sid=x.id;g.sets=g.sets.filter(s=>s.id!==sid);renderGroups();}if(x.act==='sup'){const i=getIndex(x.id);if(i>0){[g.sets[i-1],g.sets[i]]=[g.sets[i],g.sets[i-1]];renderGroups();}}if(x.act==='sdown'){const i=getIndex(x.id);if(i<g.sets.length-1){[g.sets[i+1],g.sets[i]]=[g.sets[i],g.sets[i+1]];renderGroups();}}if(x.act==='gpaste'){const name=prompt('Set name:','set-'+(g.sets.length+1));if(!name)return;const txt=prompt('Paste JSON for '+name+':');if(!txt)return;try{g.sets.push({id:rid(),name,active:true,data:tryParse(txt)});renderGroups();}catch{}}if(x.act==='sview'){const sid=x.id;const s=g.sets.find(z=>z.id===sid);if(!s)return;openSetEditor(g,s);}});
glist.addEventListener('change',e=>{const x=getActTarget(e);if(!x)return;const g=groups.find(a=>a.id===x.gid||a.id===x.id);if(!g)return;const sid=x.id;const s=g.sets.find(z=>z.id===sid);if(x.act==='gactive'){g.active=e.target.checked;}if(x.act==='gname'){g.name=e.target.value.trim()||g.name;renderGroups();}if(x.act==='gtype'){g.type=e.target.value;renderGroups();}if(x.act==='sactive'&&s){s.active=e.target.checked;}if(x.act==='smode'&&s){s.mode=e.target.value;}if(x.act==='sbp'&&s){s.bp=Number(e.target.value)||null;}if(x.act==='sname'&&s){s.alias=e.target.value.trim();}if(x.act==='sdefault'&&s){g.defaultSetId=s.id;renderGroups();}});
glist.addEventListener('change',e=>{const t=e.target;if(t.dataset.act==='gfiles'){const gid=t.dataset.id;const g=groups.find(x=>x.id===gid);[...t.files].forEach(f=>{const r=new FileReader();r.onload=()=>{const setObj={id:rid(),name:f.name.replace(/\.json$/i,''),active:true,data:tryParse(r.result)};if(g.type==='other' && /^default$/i.test(setObj.name)) g.defaultSetId=setObj.id;g.sets.push(setObj);renderGroups();};r.readAsText(f);});t.value='';}});
/* set editor */
const se=el('setEditor'),seArea=el('seArea');let seGroup=null,seSet=null;function openSetEditor(g,s){seGroup=g;seSet=s;el('seTitle').textContent=`Edit: ${g.name} / ${s.name}`;seArea.value=JSON.stringify(s.data,null,2);se.classList.add('open');}function closeSetEditor(){se.classList.remove('open');seGroup=seSet=null;}el('seClose').onclick=closeSetEditor;el('seCancel').onclick=closeSetEditor;el('seSave').onclick=()=>{try{const obj=JSON.parse(seArea.value);seSet.data=obj;status('Updated set '+seSet.name);renderGroups();closeSetEditor();}catch(e){alert('JSON error: '+e.message);}};
/* merge + convert */
function deepMerge(a,b){const isObj=x=>x&&typeof x==='object'&&!Array.isArray(x);if(isLeaf(a)||isLeaf(b)) return JSON.parse(JSON.stringify(b));if(isObj(a)&&isObj(b)){const o=JSON.parse(JSON.stringify(a));for(const k in b){o[k]=k in o? deepMerge(o[k],b[k]) : JSON.parse(JSON.stringify(b[k]));}return o;}return JSON.parse(JSON.stringify(b));}
function mergedBase(){let base={};for(const g of groups){if(!g.active) continue;if(g.type==='global'){for(const s of g.sets){if(s.active) base=deepMerge(base,s.data);}}}if(settings.useInline&&settings.useInline.checked){const t=jsEl.value.trim();if(t){try{base=deepMerge(base,JSON.parse(t));}catch{}}}return base;}
function varsFromTokens(obj,refMap){const flat=[];flatten(obj,[],flat);const valueMap=refMap||buildMap(flat);const css=[];for(const it of flat){let raw=leafVal(it.value);if(typeof raw==='object') continue;let vOut;if(typeof raw==='string'&&/\{[^}]+\}/.test(raw)){if(settings.resolveRefs.checked){const res=resolveFully(raw,valueMap);vOut=withUnits(it.path,res);}else{vOut=replaceRefsWithVars(raw,valueMap,it.path);} }else{vOut=withUnits(it.path,raw);}const parts=settings.prefix.value? [settings.prefix.value,...it.path]:it.path;css.push(`  --${toCase(parts)}: ${vOut};`);}return css;}
function boxShadowToCss(val,refMap){const map=refMap||{};const arr=Array.isArray(val)?val:[val];const segs=[];for(const o of arr){if(!o||typeof o!=='object') continue;const asCss=(k)=>{const v=o[k];if(typeof v==='string'&&/\{[^}]+\}/.test(v)) return replaceRefsWithVars(v,map,['boxShadow',k]);return withUnits(['boxShadow',k],v??0);};const p=[];if('inset'in o&&o.inset)p.push('inset');p.push(asCss('x')||'0',asCss('y')||'0',asCss('blur')||'0',asCss('spread')||'0');let color=o.color;if(typeof color==='string'&&/\{[^}]+\}/.test(color)){color=replaceRefsWithVars(color,map,['boxShadow','color']);}p.push(color||'currentColor');segs.push(p.join(' '));}return `  box-shadow: ${segs.join(', ')};`;}
function classesFromTokens(obj,refMap){const flat=[];flatten(obj,[],flat);const valueMap=refMap||buildMap(flat);const blocks=[];for(const it of flat){const isStyle=it.node && typeof it.value==='object' && it.node.type; if(!isStyle) continue;const t=String(it.node.type).toLowerCase();let props=[];if(t==='typography'){for(const k in it.value){let v=it.value[k];if(typeof v==='string'&&/\{[^}]+\}/.test(v))v=replaceRefsWithVars(v,valueMap,[...it.path,k]);else v=withUnits([...it.path,k],v);props.push(`  ${toCSSProp(k)}: ${v};`);} } else if(t==='boxshadow'){props.push(boxShadowToCss(it.value,valueMap));} else {for(const k in it.value){let v=it.value[k];if(typeof v==='string'&&/\{[^}]+\}/.test(v))v=replaceRefsWithVars(v,valueMap,[...it.path,k]);else v=withUnits([...it.path,k],v);props.push(`  ${toCSSProp(k)}: ${v};`);} }const prefix=t==='typography'?'text':(t==='boxshadow'?'elevation':'style');const cls='.'+toCase([prefix,...it.path]);blocks.push(`${cls} {\n${props.join('\n')}\n}`);}return blocks;}
function cssComment(txt){return `/* ${txt} */`;}
function convert(){let base;try{base=mergedBase();}catch{return;}
let baseCore=JSON.parse(JSON.stringify(base));
// Do not fold Other defaults into base; keep them grouped within the Other section to avoid mixing with Global
const sel=(settings.selector.value||':root').trim()||':root';
const out=[];
let bpManualQueue=[];
const baseRefMap=mapFrom(baseCore);
out.push(cssComment('Base: Global + inline'));
const baseLines=varsFromTokens(baseCore, baseRefMap);
out.push(`${sel} {\n${baseLines.join('\n')}\n}`);
const typeSeq=['breakpoint','other','mode','styles'];
const activeGroups=groups.filter(g=>g.active && g.type!=='global');
const emitSorted=settings.autoSort && settings.autoSort.checked;
function emitGroup(g){ const sets = emitSorted? uiSortedSets(g) : g.sets.slice(); for(const s of sets){ if(!s.active) continue; const mergedRef=mapFrom(deepMerge(JSON.parse(JSON.stringify(baseCore)), s.data)); if(g.type==='styles'){ const blocks=classesFromTokens(s.data, mergedRef); if(blocks.length) out.push(cssComment(`Styles: ${g.name}/${s.name}`)+"\n"+blocks.join('\n\n')); continue; } const lines=varsFromTokens(s.data, mergedRef); if(!lines.length) continue; let wrap=''; let comment=''; if(g.type==='mode'){ const r=modeRank(s); const mode=r===1?'dark':'light'; if(mode==='light'){
    out.push(`${cssComment(`Mode light — ${g.name}/${s.name} (root default)`)}\n${sel} {\n${lines.join('\n')}\n}`);
    if(settings.attrManual && settings.attrManual.checked){
      out.push(`${cssComment(`Mode light — ${g.name}/${s.name} (manual attr)`)}\n[data-theme="light"] {\n${lines.join('\n')}\n}`);
    }
    continue; }
  wrap=`[data-theme="dark"]`; comment=cssComment(`Mode dark — ${g.name}/${s.name}`); } else if(g.type==='breakpoint'){ const min=bpValue(s); if(min==null){ wrap=''; comment=cssComment(`Breakpoint default — ${g.name}/${s.name}`); } else { wrap=`@media (min-width: ${min}px)`; comment=cssComment(`Breakpoint min-width ${min}px — ${g.name}/${s.name}`); } } else if(g.type==='other'){ const alias=(s.alias&&s.alias.trim())||s.name; const isDef=(g.defaultSetId===s.id); wrap=isDef? '' : `[data-${g.name}="${alias}"]`; comment=cssComment(`Other ${g.name} — ${isDef?'default':('set '+alias)}`); }
 if(/^@media/.test(wrap)){ out.push(`${comment}\n${wrap}{\n  ${sel} {\n${lines.join('\n')}\n  }\n}`); } else if(wrap){ out.push(`${comment}\n${wrap} {\n${lines.join('\n')}\n}`);} else { out.push(`${comment}\n${sel} {\n${lines.join('\n')}\n}`);} 
 if(settings.attrManual && settings.attrManual.checked){
  if(g.type==='breakpoint'){
    const slug=slugify(s.name||'');
    const label=slug||'mobile';
    bpManualQueue.push(`${cssComment(`Breakpoint manual ${label} — ${g.name}/${s.name}`)}\n` + `[data-breakpoint="${label}"] {\n${lines.join('\n')}\n}`);
  } else if(g.type==='other' && g.defaultSetId===s.id){
    const alias=(s.alias&&s.alias.trim())||s.name;
    out.push(`${cssComment(`Other manual default ${g.name}=${alias} — ${g.name}/${s.name}`)}\n` + `[data-${g.name}="${alias}"] {\n${lines.join('\n')}\n}`);
  }
} } }
if(!emitSorted){ for(const g of activeGroups){ emitGroup(g); } } else { for(const t of typeSeq){ if(t==='breakpoint') bpManualQueue=[]; for(const g of activeGroups.filter(x=>x.type===t)){ emitGroup(g); } if(t==='breakpoint' && bpManualQueue.length){ out.push(...bpManualQueue); } } }
cssEl.value=out.join('\n\n');cssHL.innerHTML=highlightCSS(cssEl.value);status('Built CSS for base + collections');}
/* switcher snippet */
el('copySwitch').onclick=()=>{const lines=[`(function(){`,`  function set(group,name){document.documentElement.setAttribute('data-'+group,name);}`,`  window.tokenSet={set};`,`}());`];navigator.clipboard.writeText(lines.join('\n'));status('Switcher snippet copied');};
/* UI wiring */
el('convert').onclick=convert;el('fmt').onclick=()=>{try{const o=tryParse(jsEl.value);jsEl.value=JSON.stringify(o,null,2);status('Formatted JSON');jsHL.innerHTML=highlightJSON(jsEl.value);}catch{}};el('copy').onclick=async()=>{await navigator.clipboard.writeText(cssEl.value||'');status('CSS copied');};el('dl').onclick=()=>{const blob=new Blob([cssEl.value||''],{type:'text/css'});const a=document.createElement('a');a.href=URL.createObjectURL(blob);a.download='tokens.css';a.click();URL.revokeObjectURL(a.href);};// sample
el('sample').onclick=()=>{jsEl.value=`{\n  \"display\": {\n    \"fontSize\": {\n      \"lg\": { \"value\": 56 },\n      \"md\": { \"value\": 40 }\n    },\n    \"regular\": { \"value\": 400 },\n    \"fontFamily\": { \"value\": \"'Noto Serif', serif\" },\n    \"lineHeight\": { \"value\": 1.2 }\n  },\n  \"letterSpacing\": {\n    \"none\": { \"value\": 0 }\n  },\n  \"text\": {\n    \"display\": {\n      \"regular\": {\n        \"lg\": {\n          \"value\": {\n            \"fontSize\": \"{display.fontSize.lg}\",\n            \"fontWeight\": \"{display.regular}\",\n            \"fontFamily\": \"{display.fontFamily}\",\n            \"lineHeight\": \"{display.lineHeight}\",\n            \"letterSpacing\": \"{letterSpacing.none}\"\n          },\n          \"type\": \"typography\"\n        }\n      }\n    }\n  },\n  \"color\": {\n    \"brand\": { \"value\": \"#e11d48\" },\n    \"bg\": { \"value\": \"#0b0d10\" },\n    \"text\": { \"value\": \"{color.brand}\" }\n  }\n}`;status('Loaded sample');jsHL.innerHTML=highlightJSON(jsEl.value);};// upload single json
el('file').parentElement.onclick=()=>el('file').click();
el('file').onchange=e=>{const f=e.target.files[0];if(!f) return;const r=new FileReader();r.onload=()=>{jsEl.value=r.result;status('Loaded '+f.name);jsHL.innerHTML=highlightJSON(jsEl.value);};r.readAsText(f);} ;
function enableTabInsertion(textarea){textarea.addEventListener('keydown',e=>{if(e.key==='Tab'){e.preventDefault();const s=textarea.selectionStart;const v=textarea.value;textarea.value=v.substring(0,s)+'\t'+v.substring(textarea.selectionEnd);textarea.selectionStart=textarea.selectionEnd=s+1;jsHL.innerHTML=highlightJSON(jsEl.value);cssHL.innerHTML=highlightCSS(cssEl.value);}if((e.metaKey||e.ctrlKey)&&e.key==='Enter'){convert();}});}enableTabInsertion(jsEl);enableTabInsertion(cssEl);attachHL(jsEl,jsHL,highlightJSON);attachHL(cssEl,cssHL,highlightCSS);
// Debounced auto-convert
let t=null;jsEl.addEventListener('input',()=>{if(!(settings.useInline&&settings.useInline.checked))return;clearTimeout(t);t=setTimeout(convert,400);});
/* tests */
try{console.assert(typeof convert==='function','convert exists');}catch{}
try{console.assert(slugify('A  B__C')==='a-b-c','slugify basic');}catch{}
try{const m={'unit.20':20};const fb=resolvedValueForKey('unit.20',m,['unit','20']);console.assert(/20(px)?/.test(String(fb)),'resolvedValueForKey');}catch{}
